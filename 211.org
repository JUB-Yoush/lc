#+title: 211. Design Add and Search Words Data Structure
* Problem
Design a data structure that supports adding new words and finding if a string matches any previously added string.

Implement the WordDictionary class:

    WordDictionary() Initializes the object.
    void addWord(word) Adds word to the data structure, it can be matched later.
    bool search(word) Returns true if there is any string in the data structure that matches word or false otherwise. word may contain dots '.' where dots can be matched with any letter.
** Constraints:

1 <= word.length <= 25
word in addWord consists of lowercase English letters.
word in search consist of '.' or lowercase English letters.
There will be at most 2 dots in word for search queries.
At most 104 calls will be made to addWord and search.

* Example
Input
["WordDictionary","addWord","addWord","addWord","search","search","search","search"]
[[],["bad"],["dad"],["mad"],["pad"],["bad"],[".ad"],["b.."]]
Output
[null,null,null,null,false,true,true,true]

Explanation
WordDictionary wordDictionary = new WordDictionary();
wordDictionary.addWord("bad");
wordDictionary.addWord("dad");
wordDictionary.addWord("mad");
wordDictionary.search("pad"); // return False
wordDictionary.search("bad"); // return True
wordDictionary.search(".ad"); // return True
wordDictionary.search("b.."); // return True

* Thinking
This is a trie problem (prefix tree)
Ion know tries


* code
#+begin_src python
class TrieNode:
    def __init__(self):
        self.children = {}
        self.word = False

class WordDictionary:
    def __init__(self):
        self.root = TrieNode()

    def addWord(self,word):
        curr = self.root
        for c in word:
            if c not in curr.children:
                curr.children[c] = TrieNode()
            curr = curr.children[c]
        curr.word = True

    def search(self,word):
        # dfs(current string index, current root)
        def dfs(j,root):
            curr = root

            for i in range(j,len(word)):
                c = word[i]
                if c == '.':
                    # go over every character and check if the next value matches
                    for child in curr.children.values():
                        if dfs(i+1,child):
                            return True
                    return False
                else:
                    # normal not . case
                    if c not in curr.children:
                        return False
                    curr = curr.children[c]
                return curr.word

        return dfs(0,self.root)

#+end_src

* solution
Ordinary Prefix Tree word search, however whenever you find a '.' do a recursive dfs over ALL children values
